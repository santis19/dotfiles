import os
import sys


DISTRIBUTIONS = ["old_stable", "stable", "testing", "unstable",
                 "wheezy", "wheezy-backports", "jessie", "jessie-backports",
                 "stretch", "sid"]

class SourcesCreator(object):
    def __init__(self):
        self.httpredir = "deb http://httpredir.debian.org/debian"
        self.httpredir_src = "deb-src http://httpredir.debian.org/debian"
        self.areas = ["main", "contrib", "non-free"]

    def add_repos(self, dists, areas, overwrite=False):
        lines = []
        blank = ""
        title = "# Lines added by Debian Post Installation Script"
        if overwrite:
            symbol = 'w'
        else:
            symbol = 'a'
            lines.append(blank)
        for dist in dists:
            line1 = self.httpredir + " " + dist
            line2 = self.httpredir_src + " " + dist
            for area in areas:
                line1 + = " " + area
                line2 + = " " + area
            lines.append(title)
            lines.append(line1)
            lines.append(line2)
            lines.append(blank)
        with open("/etc/apt/sources_list", symbol) as sources:
            sources.wri
        
        
        for dist in dists:
            line = dist
            for area in areas:
                line += " " + area
            if overwrite:
                symbol = " > "
            else:
                symbol = " >> "
            os.system("echo """ + symbol + "/etc/apt/sources.list")
            os.system("echo '# Lines added by Debian " + 
                      "Post Installation Script' >> /etc/apt/sources.list")
            os.system("echo " + self.httpredir + " " + line +
                      " >> /etc/apt/sources.list")
            os.system("echo " + self.httpredir_src + " " + line +
                      " >> /etc/apt/sources.list")
            os.system("echo "" >> /etc/apt/sources.list")


class PackagesInstaller(object):
    def __init__(self):
        self.install_packages = {}

    def read(self, packages_filename):
        distribution = ""
        title = ""
        titles = []
        packages = {}
        try:
            os.path.isdir(packages_filename)
        except:
            return None, None
        with open(os.path.join(".", packages_filename)) as pkgfile:
            for line in pkgfile:
                if "#" not in line:
                    if "!" in line:
                        if distribution == "":
                            distribution = line.replace("!", "").strip()
                            if distribution not in DISTRIBUTIONS:
                                raise ValueError("Distribution " + 
                                                 distribution +
                                                 "is not a valid one.")
                                sys.exit()
                        else:
                            raise Warning("Line " + line + " ignored.")
                    if "[" in line:
                        title = line.replace("[", "").replace("]", "")
                        title = title.strip()
                        titles.append(title)
                        packages[title] = []
                    elif line.strip() != "\n":
                        elements = line.split()
                        if title != "":
                            for item in elements:
                                packages[title].append(item)
        return distribution, titles, packages

    def choose_packages(self, packages_filename):
        distribution, titles, packages = self.read(packages_filename)
        install = []
        for title in titles:
            answer = question(" "*2 + "* Install " + title + "?")
            if answer:
                for package in packages[title]:
                    install.append(package)
        if not self.install_packages.has_key(distribution):
            self.install_packages[distribution] = []
        for package in install:
            self.install_packages[distribution].append(package)

    def install(self, yes=False):
        apt_line = "apt-get install -t "
        install_lines = []
        for distribution in self.install_packages.keys():
            install_line = apt_line + distribution
            if yes:
                install_line += " -y"
            for package in self.install_packages[distribution]:
                install_line += " " + package
            install_lines.append(install_line.strip())
        for install_line in install_lines:
            os.system(install_line)


def question(sentence, default=True):
    answer = False
    yes = ['yes', 'y']
    no = ['no', 'n']
    if default:
        yes.append('')
        key_indicator = " [Y/n] "
    else:
        no.append('')
        key_indicator = " [y/N] "
    while not answer:
        choice = raw_input(str(sentence) + key_indicator).lower()
        if choice in yes:
            answer = True
            return True
        elif choice in no:
            answer = True
            return False
